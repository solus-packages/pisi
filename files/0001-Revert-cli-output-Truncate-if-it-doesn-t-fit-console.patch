From 0f80b6fff95f8d9af35d2d6cfbb7e41b62c9405f Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Mon, 28 Aug 2023 12:24:36 -0500
Subject: [PATCH] Revert "cli/output: Truncate if it doesn't fit console width"

This reverts commit 45e9e4226b92346295b9f0f47fd81e6f1feb52cd.
---
 pisi/cli/__init__.py | 20 ++------------------
 1 file changed, 2 insertions(+), 18 deletions(-)

diff --git a/pisi/cli/__init__.py b/pisi/cli/__init__.py
index f2b6ece..31c826e 100644
--- a/pisi/cli/__init__.py
+++ b/pisi/cli/__init__.py
@@ -48,7 +48,7 @@ class CLI(pisi.ui.UI):
     def close(self):
         pisi.util.xterm_title_reset()
 
-    def output(self, msg, err = False, verbose = False, formatted = False):
+    def output(self, msg, err = False, verbose = False):
         if (verbose and self.show_verbose) or (not verbose):
             if type(msg)==type(unicode()):
                 msg = msg.encode('utf-8')
@@ -56,24 +56,8 @@ class CLI(pisi.ui.UI):
                 out = sys.stderr
             else:
                 out = sys.stdout
-            term_height, term_width = pisi.util.get_terminal_size()
-            truncated = False
-            # Truncate output to fit term_width
-            if len(msg) > term_width:
-                if formatted is not True:
-                    truncated = True
-                    maxlen = term_width - 2
-                    msg = msg[:maxlen] + '...\n'
             out.write(msg)
-            # Clear after cursor due to truncated lines sometimes
-            # getting stuck there
-            out.write('\x1B[0K')
             out.flush()
-            # Don't keep truncated lines around
-            if truncated:
-                out.write('\x1B[0K')  # clear after cursor
-                out.write('\x1b[1A')  # move cursor up (\n)
-                out.write('\x1b[2K')  # delete line
 
     def formatted_output(self, msg, verbose = False, noln = False, column=":"):
         key_width = 20
@@ -112,7 +96,7 @@ class CLI(pisi.ui.UI):
             if not noln:
                 new_msg = "%s\n" % new_msg
         msg = new_msg
-        self.output(unicode(msg), verbose=verbose, formatted=True)
+        self.output(unicode(msg), verbose=verbose)
 
     def info(self, msg, verbose = False, noln = False):
         # TODO: need to look at more kinds of info messages
-- 
2.42.0

