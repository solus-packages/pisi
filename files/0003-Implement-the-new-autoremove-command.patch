From dd190e28f9cb7bc5268155498673f8b5e5165ef8 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Fri, 8 Dec 2017 16:13:31 +0000
Subject: [PATCH 3/6] Implement the new `autoremove` command

This is highly similar to the "remove" command except it will also attempt
to remove all automatically installed packages related to the packages now
being removed.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 pisi/api.py               | 11 ++++++++
 pisi/cli/autoremove.py    | 64 +++++++++++++++++++++++++++++++++++++++++++++++
 pisi/cli/pisicli.py       |  1 +
 pisi/operations/remove.py | 22 ++++++++++++++--
 4 files changed, 96 insertions(+), 2 deletions(-)
 create mode 100644 pisi/cli/autoremove.py

diff --git a/pisi/api.py b/pisi/api.py
index a2869fb..9f60c61 100644
--- a/pisi/api.py
+++ b/pisi/api.py
@@ -430,6 +430,17 @@ def remove(packages, ignore_dependency=False, ignore_safety=False):
     pisi.db.historydb.HistoryDB().create_history("remove")
     return pisi.operations.remove.remove(packages, ignore_dependency, ignore_safety)
 
+@locked
+def autoremove(packages, ignore_dependency=False, ignore_safety=False):
+    """
+    Removes the given packages from the system along with automatically installed packages
+    @param packages: list of package names -> list_of_strings
+    @param ignore_dependency: removes packages without looking into theirs reverse deps if True
+    @param ignore_safety: system.base packages can also be removed if True
+    """
+    pisi.db.historydb.HistoryDB().create_history("remove")
+    return pisi.operations.remove.remove(packages, ignore_dependency, ignore_safety, autoremove=True)
+
 @locked
 def install(packages, reinstall=False, ignore_file_conflicts=False, ignore_package_conflicts=False):
     """
diff --git a/pisi/cli/autoremove.py b/pisi/cli/autoremove.py
new file mode 100644
index 0000000..e44e275
--- /dev/null
+++ b/pisi/cli/autoremove.py
@@ -0,0 +1,64 @@
+# -*- coding:utf-8 -*-
+#
+# Copyright (C) 2005 - 2007, TUBITAK/UEKAE
+# Copyright (C) 2013-2017 Solus Project
+#
+# This program is free software; you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free
+# Software Foundation; either version 2 of the License, or (at your option)
+# any later version.
+#
+# Please read the COPYING file.
+#
+
+import optparse
+
+import gettext
+__trans = gettext.translation('pisi', fallback=True)
+_ = __trans.ugettext
+
+import pisi.cli.command as command
+import pisi.context as ctx
+import pisi.api
+import pisi.db
+
+class AutoRemove(command.PackageOp):
+    __doc__ = _("""Remove eopkg packages
+
+Usage: autoremove <package1> <package2> ... <packagen>
+
+Remove package(s) from your system. Just give the package names to remove.
+
+You can also specify components instead of package names, which will be
+expanded to package names.
+
+Any additional packages that were automatically installed as a result of
+installing the packages being removed, will also be removed if it is
+safe to do so.
+""")
+    __metaclass__ = command.autocommand
+
+    def __init__(self, args):
+        super(AutoRemove, self).__init__(args)
+        self.componentdb = pisi.db.componentdb.ComponentDB()
+
+    name = ("autoremove", "rmf")
+
+    def options(self):
+        group = optparse.OptionGroup(self.parser, _("autoremove options"))
+        super(AutoRemove, self).options(group)
+        group.add_option("--purge", action="store_true",
+                     default=False, help=_("Removes everything including changed config files of the package"))
+        self.parser.add_option_group(group)
+
+    def run(self):
+        self.init()
+
+        if not self.args:
+            self.help()
+            return
+
+        packages = []
+        packages.extend(self.args)
+
+        pisi.api.autoremove(packages)
diff --git a/pisi/cli/pisicli.py b/pisi/cli/pisicli.py
index f56ba63..50cf2a1 100644
--- a/pisi/cli/pisicli.py
+++ b/pisi/cli/pisicli.py
@@ -21,6 +21,7 @@ import pisi
 import pisi.cli
 import pisi.cli.command as command
 import pisi.cli.addrepo
+import pisi.cli.autoremove
 import pisi.cli.blame
 import pisi.cli.build
 import pisi.cli.check
diff --git a/pisi/operations/remove.py b/pisi/operations/remove.py
index ace8320..ead864e 100644
--- a/pisi/operations/remove.py
+++ b/pisi/operations/remove.py
@@ -24,7 +24,7 @@ import pisi.util as util
 import pisi.ui as ui
 import pisi.db
 
-def remove(A, ignore_dep = False, ignore_safety = False):
+def remove(A, ignore_dep = False, ignore_safety = False, autoremove = False):
     """remove set A of packages from system (A is a list of package names)"""
 
     componentdb = pisi.db.componentdb.ComponentDB()
@@ -60,7 +60,25 @@ def remove(A, ignore_dep = False, ignore_safety = False):
         return False
 
     if not ctx.config.get_option('ignore_dependency') and not ignore_dep:
-        G_f, order = plan_remove(A)
+        if autoremove:
+            G_f, order = plan_autoremove(A)
+            A3 = set(order)
+
+            if not ctx.get_option('ignore_safety') and not ctx.config.values.general.ignore_safety and not ignore_safety:
+                if componentdb.has_component('system.base'):
+                    systembase = set(componentdb.get_union_component('system.base').packages)
+                    refused = A3.intersection(systembase)
+                    if refused:
+                        raise pisi.Error(_("Safety switch prevents the removal of "
+                                           "following packages:\n") +
+                                            util.format_by_columns(sorted(refused)))
+                        A3 = A3 - systembase
+                        order = list(A3)
+                else:
+                    ctx.ui.warning(_("Safety switch: The component system.base cannot be found."))
+
+        else:
+            G_f, order = plan_remove(A)
     else:
         G_f = None
         order = A
-- 
2.15.1

