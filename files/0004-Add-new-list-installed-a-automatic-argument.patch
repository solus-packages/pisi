From 4cdca5f6786c89c68c9077a4683c3a589766646a Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Fri, 8 Dec 2017 16:24:51 +0000
Subject: [PATCH 4/6] Add new "list-installed -a,--automatic" argument

This new argument will only list the automatically installed packages
and any relevant parents so that users know what is eligible for automatic
removal.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 pisi/cli/listinstalled.py | 30 +++++++++++++++++++++++++++++-
 pisi/operations/remove.py | 18 ++++++++++++++++++
 2 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/pisi/cli/listinstalled.py b/pisi/cli/listinstalled.py
index 0540380..3a13bf9 100644
--- a/pisi/cli/listinstalled.py
+++ b/pisi/cli/listinstalled.py
@@ -19,6 +19,8 @@ _ = __trans.ugettext
 import pisi.cli.command as command
 import pisi.context as ctx
 import pisi.db
+from pisi.operations.remove import list_orphans
+import pisi.util as util
 
 class ListInstalled(command.Command):
     __doc__ = _("""Print the list of all installed packages
@@ -38,7 +40,8 @@ Usage: list-installed
     def options(self):
 
         group = optparse.OptionGroup(self.parser, _("list-installed options"))
-
+        group.add_option("-a", "--automatic", action="store_true",
+                               default=False, help=_("Show automatically installed packages and the parent dependency"))
         group.add_option("-b", "--with-build-host",
                          action="store",
                          default=None,
@@ -56,6 +59,9 @@ Usage: list-installed
     def run(self):
         self.init(database = True, write = False)
 
+        if self.options.automatic:
+            return self.run_automatic_only()
+
         build_host = ctx.get_option("with_build_host")
         if build_host is None:
             installed = self.installdb.list_installed()
@@ -88,3 +94,25 @@ Usage: list-installed
             else:
                 package.name = package.name + ' ' * (maxlen - len(package.name))
                 ctx.ui.info('%s - %s' % (package.name, unicode(package.summary)))
+
+    def run_automatic_only(self):
+        """
+        Only list the automatically installed packages
+        """
+        orphans = list_orphans()
+        keys = orphans.keys()
+        keys.sort()
+        maxlen = max([len(x) for x in keys])
+
+        for orphan in keys:
+            owner = orphans[orphan]
+            orphan_print = orphan
+            if owner:
+                orphan_print = util.colorize(orphan_print, 'green')
+            else:
+                orphan_print = util.colorize(orphan_print, 'brightwhite')
+
+            if not owner:
+                owner = _("Orphaned package")
+            orphan_print += ' ' * max(0, maxlen - len(orphan))
+            ctx.ui.info('%s - %s ' % (orphan_print, unicode(owner)))
diff --git a/pisi/operations/remove.py b/pisi/operations/remove.py
index ead864e..0a1cdf1 100644
--- a/pisi/operations/remove.py
+++ b/pisi/operations/remove.py
@@ -227,6 +227,24 @@ def plan_autoremove_all():
 
     return plan_remove(murderficate)
 
+def list_orphans():
+    """
+    Helper function to return a list of potential orphans and parents
+    """
+    idb = pisi.db.installdb.InstallDB()
+    orphans = idb.list_auto_installed()
+    global revdep_owner
+
+    ret = dict()
+    for pkgID in orphans:
+        if not idb.has_package(pkgID):
+            continue
+        if not revdep_from_hell(idb, orphans, ret.keys(), pkgID):
+            ret[pkgID] = revdep_owner
+            continue
+        ret[pkgID] = None
+    return ret
+
 def remove_conflicting_packages(conflicts):
     if remove(conflicts, ignore_dep=True, ignore_safety=True):
         raise Exception(_("Conflicts remain"))
-- 
2.15.1

