From b4838458e8a0c60ba7b701358ffc800fa70e4b3d Mon Sep 17 00:00:00 2001
From: Joey Riches <josephriches@gmail.com>
Date: Tue, 15 Feb 2022 10:43:49 +0000
Subject: [PATCH 2/2] Make retry handling more robust by catching IOError

All of the common cases we would want to catch (URLError, socket.timeout, sslerror)
are a subclass of IOError, let's catch that instead to make retry handling more generic.
---
 pisi/fetcher.py | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/pisi/fetcher.py b/pisi/fetcher.py
index 8755847..0dcd3e0 100644
--- a/pisi/fetcher.py
+++ b/pisi/fetcher.py
@@ -20,7 +20,6 @@ import base64
 import contextlib
 import os
 import shutil
-import ssl
 import time
 import urllib2
 
@@ -179,15 +178,12 @@ class Fetcher:
                             blocknum += 1
                             fetch_handler.update(blocknum, bs, size)
                     success = True
-            # WARNING : Solus specific workaround for RIT mirror issue.
-            except ssl.SSLError as e:
+            except IOError as e:
                 attempt += 1
                 if attempt == self._get_retry_attempts() + 1:
                     raise FetchError(_('Hit max retry count when downloading: "%s"') % (self.url.get_uri()))
                 ctx.ui.warning(_('\nFailed to fetch file, retrying %d out of %d "%s": %s') % (attempt, self._get_retry_attempts(), self.url.get_uri(), e))
                 pass
-            except urllib2.URLError as e:
-                raise FetchError(_('Could not fetch destination file "%s": %s') % (self.url.get_uri(), e))
 
         if os.stat(self.partial_file).st_size == 0:
             os.remove(self.partial_file)
-- 
2.35.1

